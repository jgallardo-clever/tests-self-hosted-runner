name: Build and Deploy Calculadora Web

on:
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: self-hosted
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Verify build environment
      run: |
        echo "Verificando entorno de build en Windows Server 2022..."
        echo "MSBuild version:"
        msbuild -version
        echo ""
        echo ".NET Framework versions disponibles:"
        Get-ChildItem "C:\Program Files (x86)\Microsoft SDKs\Windows\*" -Name | Where-Object { $_ -like "v*" }
        echo ""
        echo "Directorio de trabajo actual:"
        Get-Location

    - name: Clean previous build artifacts
      run: |
        if (Test-Path "calculadora-web\bin") {
          Remove-Item "calculadora-web\bin" -Recurse -Force
          echo "Limpiados artefactos de build anteriores"
        }
        if (Test-Path "calculadora-web\obj") {
          Remove-Item "calculadora-web\obj" -Recurse -Force
          echo "Limpiados objetos de build anteriores"
        }

    - name: Build Application
      run: |
        echo "Compilando Calculadora Web en modo Release..."
        echo "Entorno: Windows Server 2022 con MSBuild"
        
        # Intentar compilación con el proyecto principal
        echo "Intentando build con proyecto principal..."
        msbuild calculadora-web/CalculadoraWeb.csproj `
          /p:Configuration=Release `
          /p:Platform="Any CPU" `
          /p:TargetFrameworkVersion=v4.8 `
          /p:OutputPath=bin\ `
          /verbosity:minimal `
          /nologo `
          /target:Build
        
        if ($LASTEXITCODE -ne 0) {
          echo "❌ Build principal falló, intentando con proyecto simplificado..."
          
          # Usar proyecto simplificado que no depende de targets de VS
          msbuild calculadora-web/CalculadoraWeb-Simple.csproj `
            /p:Configuration=Release `
            /p:Platform="Any CPU" `
            /p:TargetFrameworkVersion=v4.8 `
            /p:OutputPath=bin\ `
            /verbosity:minimal `
            /nologo `
            /target:Build
          
          if ($LASTEXITCODE -ne 0) {
            echo "❌ Build simplificado falló, intentando compilación directa..."
            
            # Método de último recurso: compilar directamente con csc.exe
            $cscPath = "C:\Windows\Microsoft.NET\Framework64\v4.0.30319\csc.exe"
            if (!(Test-Path $cscPath)) {
              $cscPath = "C:\Windows\Microsoft.NET\Framework\v4.0.30319\csc.exe"
            }
            
            if (Test-Path $cscPath) {
              echo "Usando compilador C# directo: $cscPath"
              
              # Crear directorio bin
              if (!(Test-Path "calculadora-web\bin")) {
                New-Item -ItemType Directory -Path "calculadora-web\bin" -Force
              }
              
              # Referencias del framework necesarias
              $frameworkPath = Split-Path $cscPath
              $references = @(
                "$frameworkPath\System.dll",
                "$frameworkPath\System.Web.dll", 
                "$frameworkPath\System.Core.dll",
                "$frameworkPath\System.Data.dll",
                "$frameworkPath\System.Drawing.dll"
              )
              
              # Verificar que existen las referencias
              $validRefs = @()
              foreach ($ref in $references) {
                if (Test-Path $ref) {
                  $validRefs += "/reference:$ref"
                }
              }
              
              # Compilar
              & $cscPath /target:library `
                /out:"calculadora-web\bin\CalculadoraWeb.dll" `
                $validRefs `
                "calculadora-web\App_Code\Calculator.cs" `
                "calculadora-web\Default.aspx.cs" `
                "calculadora-web\Default.aspx.designer.cs" `
                "calculadora-web\Properties\AssemblyInfo.cs"
                
              if ($LASTEXITCODE -eq 0) {
                echo "OK Compilacion exitosa con csc.exe directo"
              } else {
                echo "ERROR en compilacion directa"
                echo "Listando archivos fuente para diagnostico:"
                Get-ChildItem "calculadora-web\*.cs" -Recurse
                exit 1
              }
            } else {
              echo "ERROR No se encontro compilador C#"
              exit 1
            }
          } else {
            echo "OK Compilacion exitosa con proyecto simplificado"
          }
        } else {
          echo "OK Compilacion exitosa con proyecto principal"
        }

    - name: Verify build output
      run: |
        echo "Verificando artefactos de build..."
        if (Test-Path "calculadora-web/bin/CalculadoraWeb.dll") {
          echo "OK DLL principal generada correctamente"
          $dllInfo = Get-Item "calculadora-web/bin/CalculadoraWeb.dll"
          echo "   Tamaño: $($dllInfo.Length) bytes"
          echo "   Fecha: $($dllInfo.LastWriteTime)"
        } else {
          echo "ERROR DLL principal no encontrada"
          exit 1
        }
        
        echo ""
        echo "Contenido del directorio bin:"
        Get-ChildItem "calculadora-web/bin" | Format-Table Name, Length, LastWriteTime

    - name: Prepare IIS deployment
      run: |
        $iisPath = "C:\inetpub\wwwroot\calculadora-web"
        
        # Crear directorio de backups si no existe
        $backupDir = "C:\inetpub\backups"
        if (!(Test-Path $backupDir)) {
          New-Item -ItemType Directory -Force -Path $backupDir
          echo "Directorio de backups creado: $backupDir"
        }
        
        # Crear backup de la aplicación actual si existe y tiene contenido
        if (Test-Path $iisPath) {
          $existingFiles = Get-ChildItem $iisPath -ErrorAction SilentlyContinue
          if ($existingFiles -and ($existingFiles | Measure-Object).Count -gt 0) {
            $timestamp = Get-Date -Format "yyyyMMdd-HHmmss"
            $backupPath = "$backupDir\calculadora-web-$timestamp"
            
            Copy-Item -Path $iisPath -Destination $backupPath -Recurse -Force
            echo "OK Backup creado: $backupPath"
            
            # Limpiar el directorio actual (mantener estructura)
            Get-ChildItem $iisPath -Recurse | Remove-Item -Force -Recurse
            echo "OK Directorio IIS limpiado"
          } else {
            echo "Directorio IIS existe pero esta vacio, no se requiere backup"
          }
        }
        
        # Crear directorio de destino si no existe
        if (!(Test-Path $iisPath)) {
          New-Item -ItemType Directory -Force -Path $iisPath
          echo "OK Directorio IIS creado: $iisPath"
        }

    - name: Deploy to IIS
      run: |
        $sourcePath = "calculadora-web"
        $targetPath = "C:\inetpub\wwwroot\calculadora-web"
        
        echo "Desplegando aplicación web a IIS..."
        
        # Copiar archivos de la aplicación web
        $deploymentFiles = @(
          @{Pattern = "*.aspx"; Description = "Páginas ASP.NET"},
          @{Pattern = "*.css"; Description = "Hojas de estilo"},
          @{Pattern = "Web.config"; Description = "Configuración web"},
          @{Pattern = "bin\*.dll"; Description = "Librerías compiladas"},
          @{Pattern = "bin\*.pdb"; Description = "Símbolos de debug"}
        )
        
        $totalFiles = 0
        foreach ($deployment in $deploymentFiles) {
          $files = Get-ChildItem -Path $sourcePath -Include $deployment.Pattern -Recurse -ErrorAction SilentlyContinue
          
          if ($files) {
            echo "Copiando $($deployment.Description)..."
            foreach ($file in $files) {
              # Calcular ruta relativa desde el directorio fuente
              $relativePath = $file.FullName.Substring((Get-Item $sourcePath).FullName.Length + 1)
              $destinationFile = Join-Path $targetPath $relativePath
              $destinationDir = Split-Path $destinationFile -Parent
              
              # Crear directorio de destino si no existe
              if (!(Test-Path $destinationDir)) {
                New-Item -ItemType Directory -Force -Path $destinationDir | Out-Null
              }
              
              # Copiar archivo
              Copy-Item -Path $file.FullName -Destination $destinationFile -Force
              echo "   OK $relativePath"
              $totalFiles++
            }
          } else {
            echo "   WARNING No se encontraron archivos para: $($deployment.Description)"
          }
        }
        
        echo ""
        echo "OK Total de archivos desplegados: $totalFiles"

    - name: Configure IIS Application and Permissions
      run: |
        $iisPath = "C:\inetpub\wwwroot\calculadora-web"
        $siteName = "Default Web Site"
        $appName = "calculadora-web"
        
        echo "=============================================="
        echo "    CONFIGURACIÓN DE IIS Y PERMISOS"
        echo "=============================================="
        
        # Verificar si IIS está disponible
        try {
          Import-Module WebAdministration -ErrorAction Stop
          echo "OK Módulo WebAdministration cargado"
        } catch {
          echo "WARNING Módulo IIS no disponible, usando configuración básica"
        }
        
        # Configurar permisos básicos
        try {
          echo "Configurando permisos del sistema de archivos..."
          
          # Permisos para IIS_IUSRS (lectura y ejecución)
          icacls $iisPath /grant "IIS_IUSRS:(OI)(CI)RX" /T /Q
          echo "OK Permisos IIS_IUSRS configurados"
          
          # Permisos para ASPNET (si existe)
          icacls $iisPath /grant "ASPNET:(OI)(CI)RX" /T /Q 2>$null
          
          # Permisos para ApplicationPoolIdentity
          icacls $iisPath /grant "ApplicationPoolIdentity:(OI)(CI)RX" /T /Q 2>$null
          
          # Permisos específicos para bin
          if (Test-Path "$iisPath\bin") {
            icacls "$iisPath\bin" /grant "IIS_IUSRS:(OI)(CI)RX" /T /Q
            echo "OK Permisos del directorio bin configurados"
          }
          
          # Verificar directorio Temporary ASP.NET Files
          $tempAspNet = "C:\Windows\Microsoft.NET\Framework64\v4.0.30319\Temporary ASP.NET Files"
          if (Test-Path $tempAspNet) {
            icacls $tempAspNet /grant "IIS_IUSRS:(OI)(CI)F" /T /Q 2>$null
            echo "OK Permisos de archivos temporales ASP.NET verificados"
          }
          
        } catch {
          Write-Warning "WARNING Algunos permisos no se pudieron configurar: $($_.Exception.Message)"
        }
        
        # Intentar configurar Application Pool y Virtual Directory
        try {
          if (Get-Module WebAdministration -ErrorAction SilentlyContinue) {
            echo ""
            echo "Configurando Application Pool y Virtual Directory..."
            
            # Verificar/crear Application Pool
            $appPoolName = "CalculadoraWebPool"
            if (!(Get-IISAppPool -Name $appPoolName -ErrorAction SilentlyContinue)) {
              echo "Creando Application Pool: $appPoolName"
              New-WebAppPool -Name $appPoolName -Force
              Set-ItemProperty -Path "IIS:\AppPools\$appPoolName" -Name "managedRuntimeVersion" -Value "v4.0"
              Set-ItemProperty -Path "IIS:\AppPools\$appPoolName" -Name "enable32BitAppOnWin64" -Value $false
              echo "OK Application Pool creado"
            } else {
              echo "OK Application Pool ya existe: $appPoolName"
            }
            
            # Verificar/crear Virtual Directory o Application
            $webApp = Get-WebApplication -Name $appName -Site $siteName -ErrorAction SilentlyContinue
            if (!$webApp) {
              echo "Creando Web Application: $appName"
              New-WebApplication -Name $appName -Site $siteName -PhysicalPath $iisPath -ApplicationPool $appPoolName
              echo "OK Web Application creada"
            } else {
              echo "OK Web Application ya existe: $appName"
              # Actualizar el Application Pool
              Set-ItemProperty -Path "IIS:\Sites\$siteName\$appName" -Name "applicationPool" -Value $appPoolName
              echo "OK Application Pool actualizado"
            }
            
            # Reiniciar Application Pool
            Restart-WebAppPool -Name $appPoolName
            echo "OK Application Pool reiniciado"
            
          } else {
            echo "WARNING Configuración avanzada de IIS no disponible"
            echo "   La aplicación usará el Application Pool por defecto"
          }
        } catch {
          Write-Warning "WARNING Error en configuración IIS: $($_.Exception.Message)"
          Write-Warning "   La aplicación puede funcionar con configuración básica"
        }

    - name: Fix common IIS and ASP.NET issues
      run: |
        echo "=============================================="
        echo "  SOLUCIONANDO PROBLEMAS COMUNES DE IIS"
        echo "=============================================="
        
        # Verificar y registrar ASP.NET en IIS
        try {
          $aspnetRegiis = "C:\Windows\Microsoft.NET\Framework64\v4.0.30319\aspnet_regiis.exe"
          if (Test-Path $aspnetRegiis) {
            echo "Registrando ASP.NET 4.0 en IIS..."
            & $aspnetRegiis -i | Out-String | Write-Host
            echo "OK ASP.NET registrado en IIS"
          } else {
            echo "WARNING aspnet_regiis.exe no encontrado"
          }
        } catch {
          echo "WARNING Error al registrar ASP.NET: $($_.Exception.Message)"
        }
        
        # Reiniciar IIS para asegurar configuración fresca
        try {
          echo "Reiniciando IIS para aplicar configuraciones..."
          iisreset /restart | Out-String | Write-Host
          echo "OK IIS reiniciado exitosamente"
          
          # Esperar a que IIS esté completamente iniciado
          Start-Sleep -Seconds 5
          
        } catch {
          echo "WARNING Error al reiniciar IIS: $($_.Exception.Message)"
        }
        
        # Verificar estado de IIS después del reinicio
        try {
          $iisService = Get-Service -Name "W3SVC" -ErrorAction SilentlyContinue
          if ($iisService -and $iisService.Status -eq "Running") {
            echo "OK Servicio IIS (W3SVC) está ejecutándose"
          } else {
            echo "WARNING Servicio IIS no está ejecutándose correctamente"
          }
        } catch {
          echo "INFO No se pudo verificar el estado del servicio IIS"
        }

    - name: Verify IIS deployment and diagnose issues
      run: |
        $iisPath = "C:\inetpub\wwwroot\calculadora-web"
        
        echo "=============================================="
        echo "     VERIFICACIÓN DE DESPLIEGUE EN IIS"
        echo "=============================================="
        echo ""
        
        # Verificar estructura de directorios
        $requiredDirs = @("bin")
        foreach ($dir in $requiredDirs) {
          $dirPath = Join-Path $iisPath $dir
          if (Test-Path $dirPath) {
            $fileCount = (Get-ChildItem $dirPath | Measure-Object).Count
            echo "OK Directorio '$dir' - $fileCount archivos"
          } else {
            echo "ERROR Directorio '$dir' - FALTANTE"
            exit 1
          }
        }
        
        # Verificar archivos críticos
        $requiredFiles = @(
          @{Name = "Default.aspx"; Critical = $true},
          @{Name = "Web.config"; Critical = $true},
          @{Name = "Styles.css"; Critical = $false},
          @{Name = "bin\CalculadoraWeb.dll"; Critical = $true}
        )
        
        $missingCritical = 0
        foreach ($fileCheck in $requiredFiles) {
          $filePath = Join-Path $iisPath $fileCheck.Name
          if (Test-Path $filePath) {
            $size = (Get-Item $filePath).Length
            echo "OK $($fileCheck.Name) - $size bytes"
            
            # Verificar contenido de Default.aspx
            if ($fileCheck.Name -eq "Default.aspx") {
              $content = Get-Content $filePath -Raw
              if ($content -and $content.Length -gt 100) {
                echo "   ✓ Default.aspx contiene HTML válido"
              } else {
                echo "   ⚠️  Default.aspx parece estar vacío o incompleto"
              }
            }
          } else {
            if ($fileCheck.Critical) {
              echo "ERROR $($fileCheck.Name) - CRITICO FALTANTE"
              $missingCritical++
            } else {
              echo "WARNING $($fileCheck.Name) - Opcional faltante"
            }
          }
        }
        
        if ($missingCritical -gt 0) {
          echo ""
          echo "ERROR: $missingCritical archivos criticos faltantes"
          exit 1
        }
        
        # Diagnósticos adicionales para solucionar 404
        echo ""
        echo "=============================================="
        echo "       DIAGNÓSTICOS DE IIS Y ASP.NET"
        echo "=============================================="
        
        # Verificar configuración de IIS
        try {
          if (Get-Module WebAdministration -ErrorAction SilentlyContinue) {
            # Verificar si existe aplicación web
            $webApp = Get-WebApplication -Name "calculadora-web" -Site "Default Web Site" -ErrorAction SilentlyContinue
            if ($webApp) {
              echo "OK Web Application 'calculadora-web' encontrada"
              echo "   Ruta física: $($webApp.PhysicalPath)"
              echo "   Application Pool: $($webApp.ApplicationPool)"
            } else {
              echo "WARNING Web Application 'calculadora-web' no encontrada"
              echo "   Verificando si existe como directorio virtual..."
              
              $virtualDir = Get-WebVirtualDirectory -Site "Default Web Site" -Application "/" -Name "calculadora-web" -ErrorAction SilentlyContinue
              if ($virtualDir) {
                echo "OK Directory Virtual encontrado"
              } else {
                echo "WARNING No se encontró configuración específica"
                echo "   La aplicación debe funcionar como subdirectorio físico"
              }
            }
            
            # Verificar Application Pools
            $appPools = Get-IISAppPool | Where-Object { $_.Name -like "*Calculator*" -or $_.Name -like "*CalculadoraWeb*" }
            if ($appPools) {
              foreach ($pool in $appPools) {
                echo "OK Application Pool encontrado: $($pool.Name) - Estado: $($pool.State)"
              }
            }
          } else {
            echo "INFO Módulo WebAdministration no disponible para diagnósticos avanzados"
          }
        } catch {
          echo "WARNING Error en diagnósticos IIS: $($_.Exception.Message)"
        }
        
        # Verificar permisos de archivos
        echo ""
        echo "Verificando permisos de archivos clave..."
        $keyFiles = @("Default.aspx", "Web.config", "bin\CalculadoraWeb.dll")
        foreach ($file in $keyFiles) {
          $fullPath = Join-Path $iisPath $file
          if (Test-Path $fullPath) {
            try {
              $acl = Get-Acl $fullPath
              $hasIISPermissions = $acl.Access | Where-Object { 
                $_.IdentityReference -like "*IIS_IUSRS*" -or 
                $_.IdentityReference -like "*ApplicationPoolIdentity*" -or
                $_.IdentityReference -like "*Everyone*"
              }
              if ($hasIISPermissions) {
                echo "OK $file - Permisos IIS configurados"
              } else {
                echo "WARNING $file - Permisos IIS pueden estar faltando"
              }
            } catch {
              echo "INFO $file - No se pudieron verificar permisos: $($_.Exception.Message)"
            }
          }
        }
        
        # Verificar .NET Framework
        echo ""
        echo "Verificando instalación de .NET Framework..."
        $netFramework = Get-ChildItem "HKLM:\SOFTWARE\Microsoft\NET Framework Setup\NDP\v4\Full\" -ErrorAction SilentlyContinue
        if ($netFramework) {
          $version = $netFramework.GetValue("Release")
          if ($version -ge 528040) {
            echo "OK .NET Framework 4.8 o superior instalado (Release: $version)"
          } else {
            echo "WARNING .NET Framework version: $version (puede ser insuficiente)"
          }
        } else {
          echo "WARNING No se pudo verificar la versión de .NET Framework"
        }
        
        echo ""
        echo "=============================================="
        echo "    OK VERIFICACIONES COMPLETADAS"
        echo "=============================================="
        echo ""
        echo "🌐 URLs para probar la aplicación:"
        echo "   http://localhost/calculadora-web/"
        echo "   http://localhost/calculadora-web/Default.aspx"
        echo "   http://$env:COMPUTERNAME/calculadora-web/"
        echo ""
        echo "🔧 Si persisten problemas 404, verificar:"
        echo "   1. IIS está iniciado: iisreset"
        echo "   2. Application Pool activo en IIS Manager"
        echo "   3. Permisos de 'IIS_IUSRS' en la carpeta"
        echo "   4. .NET Framework 4.8 instalado"
        echo "   5. ASP.NET registrado en IIS: aspnet_regiis -i"

    # - name: Upload deployment artifacts
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: calculadora-web-deployment-${{ github.run_number }}
    #     path: |
    #       calculadora-web/*.aspx
    #       calculadora-web/*.css
    #       calculadora-web/Web.config
    #       calculadora-web/bin/*.dll
    #       calculadora-web/bin/*.pdb
    #     retention-days: 2
        
    # - name: Create deployment summary
    #   run: |
    #     echo "## 🚀 Resumen del Despliegue - Calculadora Web" >> $env:GITHUB_STEP_SUMMARY
    #     echo "" >> $env:GITHUB_STEP_SUMMARY
    #     echo "### ✅ Despliegue Completado Exitosamente" >> $env:GITHUB_STEP_SUMMARY
    #     echo "" >> $env:GITHUB_STEP_SUMMARY
    #     echo "| Elemento | Estado |" >> $env:GITHUB_STEP_SUMMARY
    #     echo "|----------|--------|" >> $env:GITHUB_STEP_SUMMARY
    #     echo "| 🏗️ Build | ✅ Exitoso |" >> $env:GITHUB_STEP_SUMMARY
    #     echo "| 📦 Artefactos | ✅ Generados |" >> $env:GITHUB_STEP_SUMMARY
    #     echo "| 🌐 Despliegue IIS | ✅ Completado |" >> $env:GITHUB_STEP_SUMMARY
    #     echo "| 🔐 Permisos | ✅ Configurados |" >> $env:GITHUB_STEP_SUMMARY
    #     echo "| 🔄 IIS Reiniciado | ✅ Aplicado |" >> $env:GITHUB_STEP_SUMMARY
    #     echo "| ⚙️ ASP.NET | ✅ Registrado |" >> $env:GITHUB_STEP_SUMMARY
    #     echo "" >> $env:GITHUB_STEP_SUMMARY
    #     echo "### 🌐 URLs de Acceso" >> $env:GITHUB_STEP_SUMMARY
    #     echo "- **Local**: http://localhost/calculadora-web/" >> $env:GITHUB_STEP_SUMMARY
    #     echo "- **Con Default.aspx**: http://localhost/calculadora-web/Default.aspx" >> $env:GITHUB_STEP_SUMMARY
    #     echo "- **Servidor**: http://$env:COMPUTERNAME/calculadora-web/" >> $env:GITHUB_STEP_SUMMARY
    #     echo "" >> $env:GITHUB_STEP_SUMMARY
    #     echo "### 🔧 Solución de Problemas 404" >> $env:GITHUB_STEP_SUMMARY
    #     echo "Si la aplicación muestra error 404, ejecutar en el servidor:" >> $env:GITHUB_STEP_SUMMARY
    #     echo "" >> $env:GITHUB_STEP_SUMMARY
    #     echo '```powershell' >> $env:GITHUB_STEP_SUMMARY
    #     echo "# Reiniciar IIS" >> $env:GITHUB_STEP_SUMMARY
    #     echo "iisreset /restart" >> $env:GITHUB_STEP_SUMMARY
    #     echo "" >> $env:GITHUB_STEP_SUMMARY
    #     echo "# Registrar ASP.NET en IIS" >> $env:GITHUB_STEP_SUMMARY
    #     echo 'C:\Windows\Microsoft.NET\Framework64\v4.0.30319\aspnet_regiis.exe -i' >> $env:GITHUB_STEP_SUMMARY
    #     echo "" >> $env:GITHUB_STEP_SUMMARY
    #     echo "# Verificar permisos" >> $env:GITHUB_STEP_SUMMARY
    #     echo 'icacls "C:\inetpub\wwwroot\calculadora-web" /grant "IIS_IUSRS:(OI)(CI)RX" /T' >> $env:GITHUB_STEP_SUMMARY
    #     echo "" >> $env:GITHUB_STEP_SUMMARY
    #     echo "# Verificar Application Pool en IIS Manager" >> $env:GITHUB_STEP_SUMMARY
    #     echo "# - .NET CLR Version: v4.0.30319" >> $env:GITHUB_STEP_SUMMARY
    #     echo "# - Managed Pipeline Mode: Integrated" >> $env:GITHUB_STEP_SUMMARY
    #     echo '```' >> $env:GITHUB_STEP_SUMMARY
    #     echo "" >> $env:GITHUB_STEP_SUMMARY
    #     echo "### 📋 Información Técnica" >> $env:GITHUB_STEP_SUMMARY
    #     echo "- **Framework**: .NET Framework 4.8" >> $env:GITHUB_STEP_SUMMARY
    #     echo "- **Tipo**: ASP.NET Web Forms" >> $env:GITHUB_STEP_SUMMARY
    #     echo "- **Servidor**: Windows Server 2022" >> $env:GITHUB_STEP_SUMMARY
    #     echo "- **Ruta IIS**: C:\inetpub\wwwroot\calculadora-web" >> $env:GITHUB_STEP_SUMMARY
    #     echo "- **Build #**: ${{ github.run_number }}" >> $env:GITHUB_STEP_SUMMARY
    #     echo "- **Página Principal**: Default.aspx" >> $env:GITHUB_STEP_SUMMARY
